### Warm-up ###

a = 'abc'
print(list(enumerate(a)))
print(list(enumerate([1,2,3])))

# Is star operator subject to name binding?
a = [1, 2, 3]
b = [4, 5, 6]
c = [*a, *b]
a[2] = 10
print(c)

from collections import Counter
print(Counter("Hello"))
# A Counter() object can be generated by both mappings and keywords
cols = Counter({'red': 4, 'blue': 2})
print(cols)
# Count of a missing element is zero
print(cols['yellow'])
# Supported class-specific methods
print(Counter('abracadabra').most_common(3))
c1 = Counter(a=4, b=2, c=0, d=-2)
print(sorted(c1.elements()))
c2 = Counter(a=1, b=2, c=3, d=4)
c1.subtract(c2)
print(c1.items())
c2.clear()
c1 = +c1
c3 = Counter('aaabbccc')
c1.update(c3)
print(c1.items())
print(sum(c1.values()))


# Find the n least common elements
def n_least_common(c, n):
    return c.most_common()[:-n-1:-1]


print(n_least_common(c1, 2))
del c1, c2, c3

import six
print(six.PY3)
print(six.PY2)

# Launching Python 3 scripts with Python 2 interpreter
# from __future__ import division
# from __future__ import print_function

### Dates and times: built-in routines ###
import datetime as dt
import calendar

print(calendar.isleap(2016))
print(calendar.isleap(2017))
print(calendar.leapdays(2010, 2017)) #includes first, excludes last, returns number of leap years(!) in the interval
print(calendar.weekday(2017,12,7)) #0 = Monday

t = dt.datetime.today()
print(t.weekday())
print(str(t))
t = t.replace(second = 0, microsecond = 0)
print(str(t))
print(t.year, t.month, t.day, t.hour)
t_time = dt.datetime.time(t) #separate time
t_date = dt.datetime.date(t) # separate date

t_past = dt.datetime.strptime('1/2/2016', '%m/%d/%Y') #%y for 2-digit year

t_delta = t - t_past
print(t_delta.days)
print(t_delta.seconds)


# Dynamic value as default argument
def func(arg = dt.datetime.now()):
    print("Current time: {}".format(arg))
    return None


func()
func()

### Dealing with floating-point arithmetics ###
a = 0.3
b = 0.2
print(a + b)
print(a - b)

from decimal import Decimal
c = Decimal('0.3') - Decimal('0.2')
print(c)
print(float(c))
print(type(c))
print(c + 0.4) # error
print(c + 2)

# Rounding Decimal numbers
from math import e
twoplaces = Decimal('0.01')
fourplaces = Decimal('0.0001')

e_dec = Decimal(str(e))
e_twodigits = e_dec.quantize(twoplaces)
print(e_twodigits)
print(type(e_twodigits))
print(float(e_dec.quantize(fourplaces)))

